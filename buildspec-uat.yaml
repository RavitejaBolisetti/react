version: 0.2


env:
  secrets-manager:
    PRISMA_USER: "arn:aws:secretsmanager:${AWS_DEFAULT_REGION}:${AWS_ACCOUNT_ID}:secret:prismacredentials-qKrYwy:PRISMA_USER"
    PRISMA_PASSWORD: "arn:aws:secretsmanager:${AWS_DEFAULT_REGION}:${AWS_ACCOUNT_ID}:secret:prismacredentials-qKrYwy:PRISMA_PASSWORD"
phases:
  install: # Install AWS cli, maven, Trivy
    runtime-versions:
      java: corretto17
    commands:
       - export ASSUME_ROLE_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:role/Secretassumerole"
       - export TEMP_ROLE=$(aws sts assume-role --role-arn $ASSUME_ROLE_ARN --role-session-name test)
       - export TEMP_ROLE
       - export PRISMA_ADDRESS=https://asia-south1.cloud.twistlock.com/india-1131963681
       - export PRISMA_DOWNLOAD_URL=${PRISMA_ADDRESS}/api/v1/util/twistcli
       - curl -L -u ${PRISMA_USER}:${PRISMA_PASSWORD} -X GET ${PRISMA_DOWNLOAD_URL} -o twistcli; chmod a+x twistcli;
       - echo $PRISMA_USER
       - echo $PRISMA_PASSWORD
       - curl -O -L "https://github.com/sigstore/cosign/releases/download/v2.0.2/cosign-linux-amd64"
       - mv cosign-linux-amd64 /usr/local/bin/cosign
       - chmod +x /usr/local/bin/cosign
  pre_build: # Check availability of Maven and it's version
    commands:
       - export AWS_ACCESS_KEY_ID=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.AccessKeyId')
       - export AWS_SECRET_ACCESS_KEY=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SecretAccessKey')
       - export AWS_SESSION_TOKEN=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SessionToken')
       - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 397876919607.dkr.ecr.ap-south-1.amazonaws.com
       - export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain common-lib-java --domain-owner 803584912514 --region ap-south-1 --query authorizationToken --output text`
       - export REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}
       - export IMAGE=${REPOSITORY_URI}:${CODEBUILD_BUILD_NUMBER}
       - export JAR_FILE_NAME=${JAR_FILE_NAME}
       - "echo -e '\nMaven version: '"
       - "mvn --version"
       - "java -version"
  
  build: # Build Docker image and tag it with the commit sha
    commands:
      - export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain common-lib-java --domain-owner 803584912514 --region ap-south-1 --query authorizationToken --output text`
      - docker build -t $IMAGE_REPO_NAME:$CODEBUILD_BUILD_NUMBER --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --build-arg AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN --build-arg JAR_FILE_NAME=$JAR_FILE_NAME --build-arg CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN .
      #- docker tag $IMAGE_REPO_NAME:$CODEBUILD_BUILD_NUMBER $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$CODEBUILD_BUILD_NUMBER
      - docker tag ${IMAGE_REPO_NAME}:${CODEBUILD_BUILD_NUMBER} ${IMAGE}
  post_build:
    commands:
      # Scan image
      - echo Image scanning with Prisma
      - ./twistcli images scan --address ${PRISMA_ADDRESS} --user ${PRISMA_USER} --password ${PRISMA_PASSWORD} --details ${IMAGE}
      # Push the image to ECR
      - echo Pushing the Docker image
      - docker push ${IMAGE}
      #get image with digest
      - export IMAGEDIGEST=$(docker manifest inspect --verbose ${IMAGE} | jq -r '.Descriptor.digest')
      - export IMAGE_WITH_DIGEST=${IMAGE}@${IMAGEDIGEST}
      #sign the image with Cosign
      - echo Signing image with Digest ${IMAGE_WITH_DIGEST}
      - cosign sign --tlog-upload=false --key awskms:///alias/container-image-verification ${IMAGE_WITH_DIGEST}
      #Build process complete
      - echo Build completed on `date`
cache:
  paths:
    - '/root/.m2/**/*'